{"version":3,"sources":["components/InfiniteScrolling/Image.js","components/InfiniteScrolling/InfiniteScrolling.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Image","state","displayData","this","push","props","url","Col","map","img","index","key","src","alt","React","Component","InfiniteScrolling","Row","urls","App","imgsUrl","array","i","randomNum","Math","floor","random","x","Request","setState","window","addEventListener","event","document","documentElement","scrollTop","innerHeight","offsetHeight","fetchRow","className","Button","Container","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oUAuBeA,E,2MAlBbC,MAAQ,CACNC,YAAa,I,wEAOb,OAFAC,KAAKF,MAAMC,YAAYE,KAAKD,KAAKE,MAAMC,KAGrC,kBAACC,EAAA,EAAD,KACGJ,KAAKF,MAAMC,YAAYM,KAAI,SAACC,EAAKC,GAChC,OAAO,yBAAKC,IAAKD,EAAOE,IAAKH,EAAKI,IAAKH,Y,GAZ7BI,IAAMC,W,QCaXC,E,iLAVX,OACE,kBAACC,EAAA,EAAD,KACGd,KAAKE,MAAMa,KAAKV,KAAI,SAACF,EAAKI,GACzB,OAAO,kBAAC,EAAD,CAAOC,IAAKD,EAAOJ,IAAKA,Y,GANTQ,IAAMC,WC4CvBI,E,2MA1CblB,MAAQ,CACNmB,QAAS,I,0EAKT,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC5BC,EAAI,IAAIC,QAAJ,4CAAiDL,IACzDF,EAAMjB,KAAKuB,EAAErB,KAEfH,KAAK0B,SAAS,CACZT,QAASC,M,+BAIH,IAAD,OAWP,OAVAS,OAAOC,iBAAiB,UAAU,SAAAC,GACnBC,SAASC,gBAAgBC,UAAYL,OAAOM,cAC5CH,SAASC,gBAAgBG,cAIpC,EAAKC,cAKP,yBAAKC,UAAU,OACb,6BACE,gDAEA,kBAACC,EAAA,EAAD,yBAEF,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAmBvB,KAAMf,KAAKF,MAAMmB,gB,GApC5BN,IAAMC,WCOJ2B,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a5ff927.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col } from \"react-bootstrap\";\n// import { Col } from \"react-bootstrap\";\n\nclass Image extends React.Component {\n  state = {\n    displayData: []\n  };\n  render() {\n    // console.log(this.props.url);\n\n    this.state.displayData.push(this.props.url);\n\n    return (\n      <Col>\n        {this.state.displayData.map((img, index) => {\n          return <img key={index} src={img} alt={index} />;\n        })}\n      </Col>\n    );\n  }\n}\n\nexport default Image;\n","import React from \"react\";\nimport Image from \"./Image\";\nimport { Row } from \"react-bootstrap\";\n\nclass InfiniteScrolling extends React.Component {\n  render() {\n    // console.log(this.props.urls);\n    return (\n      <Row>\n        {this.props.urls.map((url, index) => {\n          return <Image key={index} url={url} />;\n        })}\n      </Row>\n    );\n  }\n}\n\nexport default InfiniteScrolling;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Button, Container } from \"react-bootstrap\";\nimport InfiniteScrolling from \"../InfiniteScrolling/InfiniteScrolling\";\n\nclass App extends React.Component {\n  state = {\n    imgsUrl: []\n  };\n\n  fetchRow() {\n    let array = [];\n    for (let i = 0; i < 4; i++) {\n      let randomNum = Math.floor(Math.random() * 20);\n      let x = new Request(`http://api.adorable.io/avatar/250/${randomNum}`);\n      array.push(x.url);\n    }\n    this.setState({\n      imgsUrl: array\n    });\n  }\n\n  render() {\n    window.addEventListener(\"scroll\", event => {\n      var offset = document.documentElement.scrollTop + window.innerHeight;\n      var height = document.documentElement.offsetHeight;\n\n      if (offset === height) {\n        // console.log(\"At the bottom\");\n        this.fetchRow();\n      }\n    });\n\n    return (\n      <div className=\"App\">\n        <div>\n          <h1>Practicing React</h1>\n\n          <Button>bootstrap works</Button>\n        </div>\n        <Container>\n          <InfiniteScrolling urls={this.state.imgsUrl} />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}